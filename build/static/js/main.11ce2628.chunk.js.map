{"version":3,"sources":["Header.jsx","Notes.jsx","Note.jsx","App.js","serviceWorker.js","index.js","react.svg"],"names":["Header","className","src","SVG","alt","Notes","props","useState","expand","setexpand","title","content","note","setnote","inputevent","e","target","value","name","prev","onDoubleClick","type","onChange","placeholder","autoComplete","rows","column","onClick","preventDefault","passNote","Note","deleteItem","id","App","additem","setadditem","onDelete","old","filter","curData","index","map","val","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"+QAceA,EAVA,WACX,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAKC,IAAI,SACnB,uD,cC0CGC,EA7CD,SAACC,GAAW,IAAD,EAEOC,oBAAS,GAFhB,mBAEdC,EAFc,KAENC,EAFM,OAGGF,mBAAS,CAC7BG,MAAO,GACPC,QAAS,KALQ,mBAGdC,EAHc,KAGRC,EAHQ,KAOfC,EAAY,SAACC,GAAM,IAAD,EACCA,EAAEC,OAAhBC,EADa,EACbA,MAAMC,EADO,EACPA,KAEbL,GAAQ,SAACM,GACL,kCACOA,GADP,kBACcD,EAAQD,QAmB9B,OACI,oCACA,yBAAKhB,UAAU,YAAYmB,cAdf,WACZX,GAAU,KAcN,0BAAMR,UAAU,aACZO,EAAQ,2BAAOP,UAAU,KAAKoB,KAAK,OAAOH,KAAK,QAAQD,MAAOL,EAAKF,MAAOY,SAAUR,EAAYS,YAAY,QAAQC,aAAa,QAAW,KAC5I,8BAAUvB,UAAU,KAAKwB,KAAK,GAAGC,OAAO,GAAGR,KAAK,UAAUD,MAAOL,EAAKD,QAASa,aAAa,MAAMF,SAAUR,EAAYa,QApBtH,WACVlB,GAAU,IAmByIc,YAAY,iBACtJf,EAAS,4BAAQP,UAAU,OAAO0B,QAf9B,SAACZ,GACdA,EAAEa,iBACFtB,EAAMuB,SAASjB,GACfC,EAAQ,CACJH,MAAO,GACPC,QAAS,OAUK,OAA2D,SChBtEmB,EArBF,SAACxB,GAMV,OACI,oCACA,yBAAKL,UAAU,cACX,0BAAMA,UAAU,MACZ,wBAAIA,UAAU,MAAMK,EAAMI,OAC1B,uBAAGT,UAAU,MAAMK,EAAMK,SACzB,4BAAQV,UAAU,MAAM0B,QAVpB,WACZrB,EAAMyB,WAAWzB,EAAM0B,MASf,SCyBDC,MApCf,WAAgB,IAAD,EACiB1B,mBAAS,IAD1B,mBACN2B,EADM,KACGC,EADH,KAQLC,EAAU,SAACJ,GACfG,GAAW,SAACE,GAAD,OACTA,EAAIC,QAAO,SAACC,EAAQC,GAClB,OAAOA,IAASR,SAIxB,OACE,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOH,SAfS,SAACjB,GACjBuB,GAAW,SAAChB,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAiBP,UAcnB,yBAAKX,UAAU,QACdiC,EAAQO,KAAI,SAACC,EAAIF,GAChB,OAAQ,kBAAC,EAAD,CACRG,IAAMH,EACNR,GAAKQ,EACL9B,MAAOgC,EAAIhC,MACXC,QAAW+B,EAAI/B,QACfoB,WAAaK,UCpBCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,sCEzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.11ce2628.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport SVG from './react.svg';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <img src={SVG} alt=\"logo\"/>\r\n            <h1>Google Keep App Clone</h1>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React  from 'react';\r\nimport './App.css';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst Notes = (props) => {\r\n\r\n    const [expand, setexpand] = useState(false);\r\n    const [note, setnote] = useState({\r\n        title: \"\",\r\n        content: \"\",\r\n    });\r\n    const inputevent =(e) =>{\r\n        const {value,name} = e.target;\r\n\r\n        setnote((prev)=>{\r\n            return{\r\n                ...prev, [name] : value,\r\n            };\r\n        });\r\n    };\r\n    const clickme=() =>{\r\n        setexpand(true);\r\n    }; \r\n    const btonormal=() =>{\r\n        setexpand(false);\r\n    }; \r\n    const addEvent = (e) =>{\r\n        e.preventDefault();\r\n        props.passNote(note)\r\n        setnote({\r\n            title: \"\",\r\n            content: \"\",\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"wada_note\" onDoubleClick={btonormal}>\r\n            <form className=\"wada_form\">\r\n               {expand? <input className=\"in\" type=\"text\" name=\"title\" value={note.title} onChange={inputevent} placeholder=\"Title\" autoComplete=\"off\" /> : null}\r\n                <textarea className=\"in\" rows=\"\" column=\"\" name=\"content\" value={note.content} autoComplete=\"off\" onChange={inputevent} onClick={clickme}  placeholder=\"Write a Note\" />\r\n                {expand ? <button className=\"plus\" onClick={addEvent}> + </button> : null}\r\n            </form>\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Notes;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nconst Note = (props) => {\r\n\r\n    const deleteI = () =>{\r\n        props.deleteItem(props.id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"chota_note\">\r\n            <form className=\"f1\">\r\n                <h1 className=\"f2\">{props.title}</h1>\r\n                <p className=\"f2\">{props.content}</p>\r\n                <button className=\"del\" onClick={deleteI}>X</button>\r\n            </form>\r\n\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Note;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Notes from './Notes';\nimport Note from './Note';\n\nfunction App() {\n  const [additem, setadditem] = useState([])\n\n  const addEvents = (note) => {\n    setadditem((prev)=>{\n      return [...prev, note]\n    });\n  };\n    const onDelete= (id) =>{\n      setadditem((old) =>\n        old.filter((curData,index)=>{\n          return index !==id;\n        })\n      ); \n  };\n  return (\n    <>\n    <Header />\n    <Notes passNote = {addEvents}/>\n    <div className=\"grid\">\n    {additem.map((val,index)=>{\n      return (<Note \n      key= {index}\n      id= {index}\n      title={val.title}\n      content = {val.content}\n      deleteItem ={onDelete}\n      />);\n    })}\n    </div>\n\n    \n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/react.dd717418.svg\";"],"sourceRoot":""}